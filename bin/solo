#!/usr/bin/env perl

=head1 NAME

solo - run only one process up to given timeout.

=head1 VERSION

$Id: solo,v 0.4 2013/02/27 14:49:47 dankogai Exp dankogai $

=head1 SYNOPSIS

  solo [-t seconds] [-P pidfile] [-K signal] cmd ...

=head1 DESCRIPTION

This program runs I<cmd> up to the seconds then sends SIGTERM after
that.

If I<cmd> is already running, it terminates with the error message
with its PID.

If the previous session exited abnormally (exit code != 0, including
timeout), it terminates with the errar message with how the last
sesion ended. 

=over 2

=item -f

Force execution even if the last session ended abnormally.  Note
C<solo> still refuse to execute the command if another session is in
progress.

=item -t seconds

Sets the timeout in second.  When ommited, 86400 (= 1d) is used. 
Fractional seconds accepted thanks to  L<Time::HiRes>.

=item -P pidfile

The path to the PID file.  By default it is
C<< /var/run/I<cmd>.pid >> if you are root,
C<< /var/tmp/I<cmd>.pid >>  otherwise.

=item -K signal

This option overrides default signal to be sent on timeout. SIGTERM by
default.

=back

=head1 LICENSE AND COPYRIGHT

Copyright 2013 Dan Kogai.

This program is free software; you can redistribute it and/or modify it
under the terms of the the Artistic License (2.0). You may obtain a
copy of the full license at:

L<http://www.perlfoundation.org/artistic_license_2_0>

=cut

use strict;
use warnings;
use Time::HiRes qw/alarm/;
use Getopt::Std;
use Errno qw/:POSIX/;
use File::Basename qw/basename/;
use File::Spec qw/catfile/;
use POSIX qw/:sys_wait_h strerror/;
use Fcntl qw/:DEFAULT/;

our $VERSION = sprintf "%d.%02d", q$Revision: 0.4 $ =~ /(\d+)/g;

use constant DEBUG => 0;

sub usage { exec 'pod2text', $0 }

getopts 'ft:K:P:' => \my %opt;

my $cmd = shift or usage();

my $timeout = $opt{t} ? 0 + $opt{t} : 86400;

if ( !-x $cmd ) {
    my $which = qx/which $cmd/;
    chomp $which;
    die "$cmd: Command not found.\n" unless $which;
    $cmd = $which;
}
my $pidfile = $opt{P} || do {
    my $dir = $> ? '/var/tmp' : '/var/run';
    File::Spec->catfile( $dir, basename($cmd) . '.pid' );
};

sub readpidfile {
    open my $fh, '<', $pidfile or die "$pidfile:$!";
    my @lines = <$fh>;
    close $fh or die "$pidfile:$!";
    chomp @lines;
    return @lines;
}

my $soflag = O_WRONLY|O_CREAT|O_EXCL;

if ( -f $pidfile ) {
    my @lines = readpidfile();
    if ( @lines == 1 ) {
        die "$cmd: already running ($lines[0]).\n";
    }
    else {
        if ( $opt{f} ) {
            $soflag = O_WRONLY;
        }
        else {
            die "$cmd: Last session ended abnormally: ",
              strerror( $lines[1] ), " ($lines[1]).\n";
        }
    }
}

my $ksig = $opt{K} || 'TERM';

sub cleanup {
    my $code = shift || 0;
    warn $code if DEBUG;
    $code = 0 if $code =~ /^[A-Z]+$/;    # via signal handler
    $code >>= 8 if $code >= 256;          # timed out
    my @lines = readpidfile();
    kill $ksig => $lines[0];
    if ( !$code ) {
        unlink $pidfile;
    }
    else {
        open my $pidfh, '>>', $pidfile or die "$pidfile:$!";
        print {$pidfh} $code, "\n";
        close $pidfh;
        warn "$cmd: ", strerror($code), "\n";
    }
    exit $code;
}

$SIG{INT} = $SIG{TERM} = \&cleanup;

eval {
    local $SIG{ALRM} = sub { die ETIMEDOUT, "\n" };
    alarm $timeout;
    my $cpid = fork();
    die $! unless defined $cpid;
    if ($cpid) {
        sysopen my $pidfh, $pidfile, $soflag or die "$pidfile:$!";
        print {$pidfh} $cpid, "\n";
        close $pidfh;
        wait;
    }
    else {
        exec $cmd, @ARGV;
    }
    alarm 0;
};
cleanup( $? || $@ );

1;
__END__
